// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Icon generation flow from a text prompt and an optional reference image.
 *
 * - generateIcon - A function that handles the icon generation process.
 * - GenerateIconInput - The input type for the generateIcon function.
 * - GenerateIconOutput - The return type for the generateIcon function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateIconInputSchema = z.object({
  prompt: z.string().describe('The text prompt to generate an icon from.'),
  referenceImageDataUri: z
    .string()
    .optional()
    .describe(
      "An optional reference image for the icon as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type GenerateIconInput = z.infer<typeof GenerateIconInputSchema>;

const GenerateIconOutputSchema = z.object({
  iconDataUri: z
    .string()
    .describe(
      "The generated icon as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'"
    ),
});
export type GenerateIconOutput = z.infer<typeof GenerateIconOutputSchema>;

export async function generateIcon(input: GenerateIconInput): Promise<GenerateIconOutput> {
  return generateIconFlow(input);
}

const generateIconFlow = ai.defineFlow(
  {
    name: 'generateIconFlow',
    inputSchema: GenerateIconInputSchema,
    outputSchema: GenerateIconOutputSchema,
  },
  async input => {
    const modelPrompt = input.referenceImageDataUri
      ? [
          {text: input.prompt},
          {media: {url: input.referenceImageDataUri}},
        ]
      : input.prompt;

    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: modelPrompt,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media) {
      throw new Error('No image was generated.');
    }
    return {iconDataUri: media.url!};
  }
);
